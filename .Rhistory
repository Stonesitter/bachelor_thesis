# Set labels and theme
labs(title = "My Scatterplot", x = "MMM_S_Index", y = "Correct") +
theme_minimal()
# Adding vertical lines at thresholds with solid line type
p <- p + geom_vline(xintercept = thresholds_MMM_S_Index, color = "blue", linetype = "solid")
# Adding horizontal segments for mean values using annotate
p <- p + annotate("segment", x = -Inf, xend = thresholds_MMM_S_Index[1], y = mean_low, yend = mean_low, color = "skyblue") +
annotate("segment", x = thresholds_MMM_S_Index[1], xend = thresholds_MMM_S_Index[2], y = mean_medium, yend = mean_medium, color = "dodgerblue") +
annotate("segment", x = thresholds_MMM_S_Index[2], xend = Inf, y = mean_high, yend = mean_high, color = "darkblue")
# Print the plot
print(p)
library(ggplot2)
# Base plot with background coloring
p <- ggplot(merged_data, aes(x = MMM_S_Index, y = total_correct)) +
# Add colored background rectangles for each segment
geom_rect(aes(xmin = -Inf, xmax = thresholds_MMM_S_Index[1], ymin = -Inf, ymax = Inf), fill = "lightblue", alpha = 0.3) +
geom_rect(aes(xmin = thresholds_MMM_S_Index[1], xmax = thresholds_MMM_S_Index[2], ymin = -Inf, ymax = Inf), fill = "lightskyblue", alpha = 0.3) +
geom_rect(aes(xmin = thresholds_MMM_S_Index[2], xmax = Inf, ymin = -Inf, ymax = Inf), fill = "lightblue", alpha = 0.3) +
# Add scatter points
geom_point() +
# Set labels and theme
labs(title = "My Scatterplot", x = "MMM_S_Index", y = "Correct") +
theme_minimal()
# Adding vertical lines at thresholds with solid line type
p <- p + geom_vline(xintercept = thresholds_MMM_S_Index, color = "blue", linetype = "solid")
# Adding horizontal segments for mean values using annotate
p <- p + annotate("segment", x = -Inf, xend = thresholds_MMM_S_Index[1], y = mean_low, yend = mean_low, color = "skyblue") +
annotate("segment", x = thresholds_MMM_S_Index[1], xend = thresholds_MMM_S_Index[2], y = mean_medium, yend = mean_medium, color = "dodgerblue") +
annotate("segment", x = thresholds_MMM_S_Index[2], xend = Inf, y = mean_high, yend = mean_high, color = "darkblue")
# Print the plot
print(p)
library(ggplot2)
# Base plot with background coloring
p <- ggplot(merged_data, aes(x = MMM_S_Index, y = total_correct)) +
# Add colored background rectangles for each segment
geom_rect(aes(xmin = -Inf, xmax = thresholds_MMM_S_Index[1], ymin = -Inf, ymax = Inf), fill = "lightblue", alpha = 0.3) +
geom_rect(aes(xmin = thresholds_MMM_S_Index[1], xmax = thresholds_MMM_S_Index[2], ymin = -Inf, ymax = Inf), fill = "lightskyblue", alpha = 0.3) +
geom_rect(aes(xmin = thresholds_MMM_S_Index[2], xmax = Inf, ymin = -Inf, ymax = Inf), fill = "lightblue", alpha = 0.3) +
# Add scatter points
geom_point() +
# Set labels and theme
labs(title = "My Scatterplot", x = "MMM_S_Index", y = "Correct") +
theme_minimal()
# Adding vertical lines at thresholds with solid line type
p <- p + geom_vline(xintercept = thresholds_MMM_S_Index, color = "blue", linetype = "solid")
# Adding horizontal segments for mean values using annotate
p <- p + annotate("segment", x = -Inf, xend = thresholds_MMM_S_Index[1], y = mean_low, yend = mean_low, color = "darkblue") +
annotate("segment", x = thresholds_MMM_S_Index[1], xend = thresholds_MMM_S_Index[2], y = mean_medium, yend = mean_medium, color = "dodgerblue") +
annotate("segment", x = thresholds_MMM_S_Index[2], xend = Inf, y = mean_high, yend = mean_high, color = "darkblue")
# Print the plot
print(p)
table(merged_data$catMMM_S_Index)
library(dplyr)
library(ggplot2)
# Assume merged_data is already loaded and thresholds_MMM_S_Index is defined
# Create a data frame for annotations
annotation_data <- data.frame(
category = levels(merged_data$catMMM_S_Index),
counts = as.numeric(table(merged_data$catMMM_S_Index)),
xmin = c(-Inf, thresholds_MMM_S_Index[1], thresholds_MMM_S_Index[2]),
xmax = c(thresholds_MMM_S_Index[1], thresholds_MMM_S_Index[2], Inf)
) %>%
mutate(
label = paste(category, ": ", counts),
x = (xmin + xmax) / 2,  # Calculate midpoint for annotation
y = max(merged_data$total_correct) * 0.9  # Position near the top of the plot
)
# Base plot with existing elements
p <- ggplot(merged_data, aes(x = MMM_S_Index, y = total_correct)) +
geom_point() +
labs(title = "My Scatterplot", x = "MMM_S_Index", y = "Correct") +
theme_minimal() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
# Add annotations from the data frame
for (i in 1:nrow(annotation_data)) {
p <- p + annotate("text", x = annotation_data$x[i], y = annotation_data$y, label = annotation_data$label[i], size = 5, color = "white")
}
# Print the plot
print(p)
category = levels(merged_data$catMMM_S_Index)
counts = as.numeric(table(merged_data$catMMM_S_Index))
category
counts
# Annotate for "Low" segment
annotate("text", x = (min(merged_data$MMM_S_Index) + thresholds_MMM_S_Index[1]) / 2, y = max(merged_data$total_correct) * 0.9, label = paste(category[1], counts[1]), size = 5, color = "white")
library(ggplot2)
# Base plot with background coloring
p <- ggplot(merged_data, aes(x = MMM_S_Index, y = total_correct)) +
# Add colored background rectangles for each segment
geom_rect(aes(xmin = -Inf, xmax = thresholds_MMM_S_Index[1], ymin = -Inf, ymax = Inf), fill = "lightblue", alpha = 0.3) +
geom_rect(aes(xmin = thresholds_MMM_S_Index[1], xmax = thresholds_MMM_S_Index[2], ymin = -Inf, ymax = Inf), fill = "lightskyblue", alpha = 0.3) +
geom_rect(aes(xmin = thresholds_MMM_S_Index[2], xmax = Inf, ymin = -Inf, ymax = Inf), fill = "lightblue", alpha = 0.3) +
# Add scatter points
geom_point() +
# Set labels and theme
labs(title = "My Scatterplot", x = "MMM_S_Index", y = "Correct") +
theme_minimal()
# Adding vertical lines at thresholds with solid line type
p <- p + geom_vline(xintercept = thresholds_MMM_S_Index, color = "blue", linetype = "solid")
# Adding horizontal segments for mean values using annotate
p <- p + annotate("segment", x = -Inf, xend = thresholds_MMM_S_Index[1], y = mean_low, yend = mean_low, color = "darkblue") +
annotate("segment", x = thresholds_MMM_S_Index[1], xend = thresholds_MMM_S_Index[2], y = mean_medium, yend = mean_medium, color = "dodgerblue") +
annotate("segment", x = thresholds_MMM_S_Index[2], xend = Inf, y = mean_high, yend = mean_high, color = "darkblue")
# Print the plot
print(p)
table(merged_data$catMMM_S_Index)
# Annotate for "Low" segment
annotate("text", x = (min(merged_data$MMM_S_Index) + thresholds_MMM_S_Index[1]) / 2, y = max(merged_data$total_correct) * 0.9, label = paste(category[1], counts[1]), size = 5, color = "white")
p <- p + annotate("text", x = (min(merged_data$MMM_S_Index) + thresholds_MMM_S_Index[1]) / 2,
y = max(merged_data$total_correct) * 0.9,
label = paste(category[1], ": ", counts[1]), size = 5, color = "white")
print(p)
# Calculate the new minimum y-value by subtracting 5 from the current minimum y-value
new_y_min = min(merged_data$total_correct) - 5
# Adjust the plot's y-axis to include this new minimum
p <- p + expand_limits(y = new_y_min)
print(p)
# Calculate positions based on thresholds
x_positions <- c((min(merged_data$MMM_S_Index) + thresholds_MMM_S_Index[1]) / 2,
(thresholds_MMM_S_Index[1] + thresholds_MMM_S_Index[2]) / 2,
(thresholds_MMM_S_Index[2] + max(merged_data$MMM_S_Index)) / 2)
print(p)
labels <- paste(category_labels, ": ", counts)
labels <- paste(category, ": ", counts)
# Add annotations below the graph
for (i in seq_along(labels)) {
p <- p + annotate("text", x = x_positions[i], y = -10, label = labels[i], size = 5, vjust = -0.5, color = "black")
}
print(p)
library(ggplot2)
# Base plot with background coloring
p <- ggplot(merged_data, aes(x = MMM_S_Index, y = total_correct)) +
# Add colored background rectangles for each segment
geom_rect(aes(xmin = -Inf, xmax = thresholds_MMM_S_Index[1], ymin = -Inf, ymax = Inf), fill = "lightblue", alpha = 0.3) +
geom_rect(aes(xmin = thresholds_MMM_S_Index[1], xmax = thresholds_MMM_S_Index[2], ymin = -Inf, ymax = Inf), fill = "lightskyblue", alpha = 0.3) +
geom_rect(aes(xmin = thresholds_MMM_S_Index[2], xmax = Inf, ymin = -Inf, ymax = Inf), fill = "lightblue", alpha = 0.3) +
# Add scatter points
geom_point() +
# Set labels and theme
labs(title = "My Scatterplot", x = "MMM_S_Index", y = "Correct") +
theme_minimal()
# Adding vertical lines at thresholds with solid line type
p <- p + geom_vline(xintercept = thresholds_MMM_S_Index, color = "blue", linetype = "solid")
# Adding horizontal segments for mean values using annotate
p <- p + annotate("segment", x = -Inf, xend = thresholds_MMM_S_Index[1], y = mean_low, yend = mean_low, color = "darkblue") +
annotate("segment", x = thresholds_MMM_S_Index[1], xend = thresholds_MMM_S_Index[2], y = mean_medium, yend = mean_medium, color = "dodgerblue") +
annotate("segment", x = thresholds_MMM_S_Index[2], xend = Inf, y = mean_high, yend = mean_high, color = "darkblue")
# Print the plot
print(p)
library(ggplot2)
# Base plot with background coloring
p <- ggplot(merged_data, aes(x = MMM_S_Index, y = total_correct)) +
# Add colored background rectangles for each segment
geom_rect(aes(xmin = -Inf, xmax = thresholds_MMM_S_Index[1], ymin = -Inf, ymax = Inf), fill = "lightblue", alpha = 0.3) +
geom_rect(aes(xmin = thresholds_MMM_S_Index[1], xmax = thresholds_MMM_S_Index[2], ymin = -Inf, ymax = Inf), fill = "lightskyblue", alpha = 0.3) +
geom_rect(aes(xmin = thresholds_MMM_S_Index[2], xmax = Inf, ymin = -Inf, ymax = Inf), fill = "lightblue", alpha = 0.3) +
# Add scatter points
geom_point() +
# Set labels and theme
labs(title = "My Scatterplot", x = "MMM_S_Index", y = "Correct") +
theme_minimal()
# Adding vertical lines at thresholds with solid line type
p <- p + geom_vline(xintercept = thresholds_MMM_S_Index, color = "blue", linetype = "solid")
# Adding horizontal segments for mean values using annotate
p <- p + annotate("segment", x = -Inf, xend = thresholds_MMM_S_Index[1], y = mean_low, yend = mean_low, color = "darkblue") +
annotate("segment", x = thresholds_MMM_S_Index[1], xend = thresholds_MMM_S_Index[2], y = mean_medium, yend = mean_medium, color = "dodgerblue") +
annotate("segment", x = thresholds_MMM_S_Index[2], xend = Inf, y = mean_high, yend = mean_high, color = "darkblue")
# Calculate positions based on thresholds
x_positions <- c((min(merged_data$MMM_S_Index) + thresholds_MMM_S_Index[1]) / 2,
(thresholds_MMM_S_Index[1] + thresholds_MMM_S_Index[2]) / 2,
(thresholds_MMM_S_Index[2] + max(merged_data$MMM_S_Index)) / 2)
# adding lables
category = levels(merged_data$catMMM_S_Index)
counts = as.numeric(table(merged_data$catMMM_S_Index))
labels <- paste(category, ": ", counts)
# Add annotations below the graph
for (i in seq_along(labels)) {
p <- p + annotate("text", x = x_positions[i], y = -10, label = labels[i], size = 5, vjust = -0.5, color = "black")
}
# Print the plot
print(p)
# Base plot with background coloring
p <- ggplot(merged_data, aes(x = MMM_S_Index, y = total_correct)) +
# Add colored background rectangles for each segment
geom_rect(aes(xmin = -Inf, xmax = thresholds_MMM_S_Index[1], ymin = -Inf, ymax = Inf), fill = "lightblue", alpha = 0.3) +
geom_rect(aes(xmin = thresholds_MMM_S_Index[1], xmax = thresholds_MMM_S_Index[2], ymin = -Inf, ymax = Inf), fill = "black", alpha = 0.3) +
geom_rect(aes(xmin = thresholds_MMM_S_Index[2], xmax = Inf, ymin = -Inf, ymax = Inf), fill = "lightblue", alpha = 0.3) +
# Add scatter points
geom_point() +
# Set labels and theme
labs(title = "My Scatterplot", x = "MMM_S_Index", y = "Correct") +
theme_minimal()
# Base plot with background coloring
p <- ggplot(merged_data, aes(x = MMM_S_Index, y = total_correct)) +
# Add colored background rectangles for each segment
geom_rect(aes(xmin = -Inf, xmax = thresholds_MMM_S_Index[1], ymin = -Inf, ymax = Inf), fill = "lightblue", alpha = 0.3) +
geom_rect(aes(xmin = thresholds_MMM_S_Index[1], xmax = thresholds_MMM_S_Index[2], ymin = -Inf, ymax = Inf), fill = "black", alpha = 0.3) +
geom_rect(aes(xmin = thresholds_MMM_S_Index[2], xmax = Inf, ymin = -Inf, ymax = Inf), fill = "lightblue", alpha = 0.3) +
# Add scatter points
geom_point() +
# Set labels and theme
labs(title = "My Scatterplot", x = "MMM_S_Index", y = "Correct") +
theme_minimal()
# Base plot with background coloring
p <- ggplot(merged_data, aes(x = MMM_S_Index, y = total_correct)) +
# Add colored background rectangles for each segment
geom_rect(aes(xmin = -Inf, xmax = thresholds_MMM_S_Index[1], ymin = -Inf, ymax = Inf), fill = "lightblue", alpha = 0.3) +
geom_rect(aes(xmin = thresholds_MMM_S_Index[1], xmax = thresholds_MMM_S_Index[2], ymin = -Inf, ymax = Inf), fill = "black", alpha = 0.3) +
geom_rect(aes(xmin = thresholds_MMM_S_Index[2], xmax = Inf, ymin = -Inf, ymax = Inf), fill = "lightblue", alpha = 0.3) +
# Add scatter points
geom_point() +
# Set labels and theme
labs(title = "My Scatterplot", x = "MMM_S_Index", y = "Correct") +
theme_minimal()
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
# Load ggplot2 for plotting
library(ggplot2)
# Plot with LOESS smoothing
ggplot(merged_data, aes(x = MMM_S_Index, y = total_correct)) +
geom_point() +  # Add points
geom_smooth(method = "loess", span = 0.5) +  # Adjust span for smoothing
labs(title = "LOESS Fit for Total Correct vs. MMM_S_Index",
x = "MMM_S_Index",
y = "Total Correct")
# Load the splines library
library(splines)
# Fit a spline regression model
spline_model <- lm(total_correct ~ bs(MMM_S_Index, degree = 3, knots = c(20,40)), data = merged_data)
# Summary of the spline model
summary(spline_model)
# Plot the results
ggplot(merged_data, aes(x = MMM_S_Index, y = total_correct)) +
geom_point() +
geom_line(aes(y = predict(spline_model, newdata = merged_data)), color = "blue") +
labs(title = "Spline Fit for Total Correct vs. MMM_S_Index",
x = "MMM_S_Index",
y = "Total Correct")
model <- lm(total_correct ~ MMM_S_Index, data = merged_data)
summary(model)
plot(model)
plot(model)
par(c(2,2))
par(nrow(c(2,2))
)
)
par(nrow(c(2,2))
par(mfrow = c(2,2))
par(mfrow = c(2,2))
plot(model)
plot(model_poly)
plot(model_poly)
plot(model)
model
str(model)
View(model)
model
summary(model)
summary(poly_model)
View(merged_data)
model <- lm(total_correct_boxcox ~ MMM_S_Index, data = merged_data)
summary(model)
par(mfrow = c(2,2))
plot(model)
model2 <- lm(total_correct_boxcox ~ MMM_S_Index, data = merged_data)
plot(model2)
model2 <- lm(total_correct ~ MMM_S_Index, data = merged_data)
plot(model)
plot(model2)
plot(model)
plot(model)
plot(model2)
plot(model)
plot(model2)
plot(model)
plot(model2)
plot(model)
plot(model2)
plot(model)
plot(model2)
summary(model)
summary(model2)
model <- lm(total_correct ~ MMM_S_Index, data = merged_data)
model2 <- lm(total_correct_log ~ MMM_S_Index, data = merged_data)
plot(model)
plot(model2)
plot(model)
plot(model2)
summary(model)
summary(model2)
# Find the optimal Box-Cox transformation parameter
boxcox_result <- boxcox(model, plotit = FALSE)
lambda <- boxcox_result$x[which.max(boxcox_result$y)]
lambda
# Apply the Box-Cox transformation with the optimal lambda
if (lambda == 0) {
merged_data$total_correct_boxcox <- log(merged_data$total_correct + 1)  # Add 1 to avoid log(0)
} else {
merged_data$total_correct_boxcox <- (merged_data$total_correct^lambda - 1) / lambda
}
# Plot the transformed variable
par(mfrow = c(1, 2))
hist(merged_data$total_correct, main = "Histogram of Original Total Correct", xlab = "Total Correct")
hist(merged_data$total_correct_boxcox, main = "Histogram of Box-Cox Transformed Total Correct", xlab = "Box-Cox Transformed Total Correct")
model <- lm(total_correct ~ MMM_S_Index, data = merged_data)
# Find the optimal Box-Cox transformation parameter
boxcox_result <- boxcox(model, plotit = FALSE)
lambda <- boxcox_result$x[which.max(boxcox_result$y)]
lambda
# Apply the Box-Cox transformation with the optimal lambda
if (lambda == 0) {
merged_data$total_correct_boxcox <- log(merged_data$total_correct + 1)  # Add 1 to avoid log(0)
} else {
merged_data$total_correct_boxcox <- (merged_data$total_correct^lambda - 1) / lambda
}
# Plot the transformed variable
par(mfrow = c(1, 2))
hist(merged_data$total_correct, main = "Histogram of Original Total Correct", xlab = "Total Correct")
hist(merged_data$total_correct_boxcox, main = "Histogram of Box-Cox Transformed Total Correct", xlab = "Box-Cox Transformed Total Correct")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
ggplot(merged_data, aes( x = MMM_S_Index, y = total_correct_log)) +
geom_point()
ggplot(merged_data, aes( x = MMM_S_Index, y = total_correct)) +
geom_point()
ggplot(merged_data, aes( x = MMM_S_Index_log, y = total_correct)) +
geom_point()
# Q-Q Plots
qqnorm(merged_data$total_correct, main = "Q-Q Plot of Original Total Correct")
qqline(merged_data$total_correct)
qqnorm(merged_data$total_correct_boxcox, main = "Q-Q Plot of Box-Cox Transformed Total Correct")
qqline(merged_data$total_correct_boxcox)
source("C:/Users/maalt/OneDrive - Universität Wien/Dokumente/Uni/Psychologie/8. Semester/Bachelorarbeit/bachelor_thesis/R_scripts/some_base_plotting.r")
plot(merged_data$MMM_S_Index_centered, merged_data$total_correct, main = "My Scatterplot",
ylab="correct", xlab = "MM", las =1)
# log y variable
plot(merged_data$MMM_S_Index, log(merged_data$total_correct), main = "My Scatterplot",
ylab="correct", xlab = "MM", las =1)
plot(merged_data$MMM_S_Index, merged_data$total_correct, main = "My Scatterplot",
ylab="correct", xlab = "MM", las =1)
abline(v = thresholds_MMM_S_Index, col = "blue")
# Get x-limits from CURRENT plot
x_lim <- par("usr")[1:2]
# Adding horizontal segments for mean values of each category
segments(x0 = x_lim[1], x1 = thresholds_MMM_S_Index[1], y0 = mean_low, y1 = mean_low, col = "red")
segments(x0 = thresholds_MMM_S_Index[1], x1 = thresholds_MMM_S_Index[2], y0 = mean_medium, y1 = mean_medium, col = "green")
segments(x0 = thresholds_MMM_S_Index[2], x1 = x_lim[2], y0 = mean_high, y1 = mean_high, col = "purple")
plot(log(merged_data$MMM_S_Index), merged_data$total_correct, main = "My Scatterplot",
ylab="correct", xlab = "MM", las =1)
plot(merged_data$MMM_S_Index, merged_data$total_correct, main = "My Scatterplot",
ylab="correct", xlab = "MM", las =1)
abline(v = thresholds_MMM_S_Index, col = "blue")
# Get x-limits from CURRENT plot
x_lim <- par("usr")[1:2]
# Adding horizontal segments for mean values of each category
segments(x0 = x_lim[1], x1 = thresholds_MMM_S_Index[1], y0 = mean_low, y1 = mean_low, col = "red")
segments(x0 = thresholds_MMM_S_Index[1], x1 = thresholds_MMM_S_Index[2], y0 = mean_medium, y1 = mean_medium, col = "green")
segments(x0 = thresholds_MMM_S_Index[2], x1 = x_lim[2], y0 = mean_high, y1 = mean_high, col = "purple")
source("C:/Users/maalt/OneDrive - Universität Wien/Dokumente/Uni/Psychologie/8. Semester/Bachelorarbeit/bachelor_thesis/R_scripts/nice_graph.r")
# Calculate the reflection constant which is max + 1
reflection_constant <- max(merged_data$total_correct) + 1
# Reflect the data
merged_data$reflected_total_correct <- reflection_constant - merged_data$total_correct
# Plot to see the result of the reflection
hist(merged_data$reflected_total_correct, main = "Reflected Distribution of Total Correct", xlab = "Reflected Total Correct", col = "green")
# Apply the log transformation; add 1 to handle any zeros
merged_data$log_reflected_total_correct <- log(merged_data$reflected_total_correct + 1)
# Plot to see the result of the log transformation
hist(merged_data$log_reflected_total_correct, main = "Log Transformed Reflected Total Correct", xlab = "Log Reflected Total Correct", col = "red")
# Summary statistics
summary(merged_data$log_reflected_total_correct)
# Optional: Generate a Q-Q plot to evaluate normality
qqnorm(merged_data$log_reflected_total_correct)
qqline(merged_data$log_reflected_total_correct, col = "steelblue", lwd = 2)
model <- lm(log_reflected_total_correct ~ MMM_S_Index, data = merged_data)
summary(model)
par(mfrow = c(2,2))
plot(model)
source("~/.active-rstudio-document")
# Calculate the reflection constant which is max + 1
reflection_constant <- max(merged_data$total_correct) + 1
# Reflect the data
merged_data$reflected_total_correct <- reflection_constant - merged_data$total_correct
# Plot to see the result of the reflection
hist(merged_data$reflected_total_correct, main = "Reflected Distribution of Total Correct", xlab = "Reflected Total Correct", col = "green")
# Apply the log transformation; add 1 to handle any zeros
merged_data$log_reflected_total_correct <- log(merged_data$reflected_total_correct + 1)
# Plot to see the result of the log transformation
hist(merged_data$log_reflected_total_correct, main = "Log Transformed Reflected Total Correct", xlab = "Log Reflected Total Correct", col = "red")
# Summary statistics
summary(merged_data$log_reflected_total_correct)
# Optional: Generate a Q-Q plot to evaluate normality
qqnorm(merged_data$log_reflected_total_correct)
qqline(merged_data$log_reflected_total_correct, col = "steelblue", lwd = 2)
model <- lm(log_reflected_total_correct ~ MMM_S_Index, data = merged_data)
summary(model)
par(mfrow = c(2,2))
plot(model)
model2 <- lm(log_reflected_total_correct ~ poly(MMM_S_Index_centered, 2) data = merged_data)
model2 <- lm(log_reflected_total_correct ~ poly(MMM_S_Index_centered, 2), data = merged_data)
plot(model2)
summary(model2)
summary(model)
summary(model2)
use_git()
install.packages("usethis")
gitcreds::gitcreds_set()
usethis::use_github()
rlang::last_trace()
rlang::last_trace(drop = FALSE)
git status
git status
install.packages("gh")
library(gh)
gh::gh_whoami()
usethis::use_github()
rlang::last_trace()
usethis::use_github()
commit
git add .
git add .
usethis::use_github()
usethis::use_github()
usethis::use_github(protocol = "https", auth_token = NULL, create = FALSE)
usethis::use_git_remote("origin", url = NULL, overwrite = TRUE)
usethis::use_github()
rlang::last_trace()
usethis::use_git_remote("origin", url = NULL, overwrite = TRUE)
usethis::use_github()
devtools::install_github("crsh/papaja")
install.packages("devtools")
library(devtools)
devtools::install_github("crsh/papaja")
library(papaja)
library(papaja)
devtools::install_github("crsh/papaja")
library(papaja)
if ("papaja" %in% rownames(installed.packages())) {
print("papaja is installed")
} else {
print("papaja is not installed")
}
install.packages(c("bitops", "cli", "colorspace", "DescTools", "future", "parallelly", "uuid", "yaml"))
library(papaja)
library(papaja)
tinytex::install_tinytex()  # Install TinyTeX
update.packages(ask = FALSE, checkBuilt = TRUE)
tinytex::tlmgr_update()
system.file("rmarkdown", "templates", "apa6", "resources", "apa6.tex", package = "papaja")
system.file("rmarkdown", "templates", "apa6", "resources", "apa6.tex", package = "papaja")
nrow(merged_data)
install.packages("citr")
